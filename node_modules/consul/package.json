{
  "name": "consul",
  "version": "0.14.0",
  "description": "Consul client",
  "main": "./lib",
  "dependencies": {
    "papi": "^0.19.0"
  },
  "devDependencies": {
    "async": "^0.9.0",
    "debug": "^2.1.3",
    "istanbul": "^0.3.8",
    "jscs": "^1.11.3",
    "jshint": "^2.5.5",
    "lodash": "^3.5.0",
    "mocha": "^2.2.1",
    "nock": "^1.2.0",
    "node-uuid": "^1.4.3",
    "should": "^5.2.0",
    "temp": "^0.8.1"
  },
  "scripts": {
    "cover": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive && open coverage/lcov-report/index.html",
    "test": "./node_modules/.bin/jshint lib test && ./node_modules/.bin/jscs lib test && ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks && istanbul check-coverage --statements 100 --functions 100 --branches 100 --lines 100",
    "acceptance": "ACCEPTANCE=true ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- test/acceptance --recursive --check-leaks --timeout 15000"
  },
  "keywords": [
    "consul"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/silas/node-consul.git"
  },
  "author": {
    "name": "Silas Sewell",
    "email": "silas@sewell.org"
  },
  "license": "MIT",
  "readme": "# Consul [![Build Status](https://travis-ci.org/silas/node-consul.png?branch=master)](https://travis-ci.org/silas/node-consul)\n\nThis is a [Consul][consul] client.\n\n * [Documentation](#documentation)\n * [License](#license)\n\n## Documentation\n\nSee the official [HTTP API][consul-docs-api] docs for more information.\n\n * [Consul](#init)\n * [ACL](#acl)\n * [Agent](#agent)\n  * [Check](#agent-check)\n  * [Service](#agent-service)\n * [Catalog](#catalog)\n  * [Node](#catalog-node)\n  * [Service](#catalog-service)\n * [Event](#event)\n * [Health](#health)\n * [KV](#kv)\n * [Session](#session)\n * [Status](#status)\n * [Watch](#watch)\n\n<a name=\"init\"/>\n### consul([options])\n\nInitialize a new Consul client.\n\nOptions\n\n * host (String, default: 127.0.0.1): agent address\n * port (String, default: 8500): agent HTTP(S) port\n * secure (Boolean, default: false): enable HTTPS\n * ca (String[], optional): array of strings or Buffers of trusted certificates in PEM format\n\nUsage\n\n``` javascript\nvar consul = require('consul')();\n```\n\n<a name=\"callback\"/>\n### Callback\n\nAll callbacks have the following signature `function(err, data, res)`.\n\n * err (Error, optional): set if there was an error, otherwise falsy\n * data (Object, optional): response data if any, otherwise `undefined`\n * res (http.IncomingMessage, optional): HTTP response object with additional `body` property. This might not exist when `err` is set. The `body` property can be a decoded object, string, or Buffer.\n\n<a name=\"common-options\"/>\n<a name=\"method-options\"/>\n### Method Options\n\nThese options will be passed along with any method call, although only certain endpoints support them. See the [HTTP API][consul-docs-api] for more information.\n\n * dc (String, optional): datacenter (defaults to local for agent)\n * wan (Boolean, default: false): return WAN members instead of LAN members\n * consistent (Boolean, default: false): require strong consistency\n * stale (Boolean, default: false): use whatever is available, can be arbitrarily stale\n * index (String, optional): used with `ModifyIndex` to block and wait for changes\n * wait (String, optional): limit how long to wait for changes (ex: `5m`), used with index\n * token (String, optional): ACL token\n\nThese options work for all methods.\n\n * ctx (EventEmitter, optional): emit `cancel` to abort request\n * timeout (Number, optional): number of milliseconds before request is aborted\n\n<a name=\"acl\"/>\n### consul.acl\n\n * [create](#acl-create)\n * [update](#acl-update)\n * [destroy](#acl-destroy)\n * [get](#acl-get)\n * [clone](#acl-clone)\n * [list](#acl-list)\n\n<a name=\"acl-create\"/>\n### consul.acl.create([options], callback)\n\nCreates a new token with policy.\n\nOptions\n\n * name (String, optional): human readable name for the token\n * type (String, enum: client, management; default: client): type of token\n * rules (String, optional): string encoded HCL or JSON\n\nUsage\n\n``` javascript\nconsul.acl.create(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"ID\": \"b1f4c10e-b61b-e1de-de95-218c9fefdd3e\"\n}\n```\n\n<a name=\"acl-update\"/>\n### consul.acl.update(options, callback)\n\nUpdate the policy of a token.\n\nOptions\n\n * id (String): token ID\n * name (String, optional): human readable name for the token\n * type (String, enum: client, management; default: client): type of token\n * rules (String, optional): string encoded HCL or JSON\n\nUsage\n\n``` javascript\nconsul.acl.update({ id: '63e1d82e-f718-eb92-3b7d-61f0c71d45b4', name: 'test' }, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"acl-destroy\"/>\n### consul.acl.destroy(options, callback)\n\nDestroys a given token.\n\nOptions\n\n * id (String): token ID\n\nUsage\n\n``` javascript\nconsul.acl.destroy('b1f4c10e-b61b-e1de-de95-218c9fefdd3e', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"acl-get\"/>\n### consul.acl.get(options, callback)\n\nQueries the policy of a given token.\n\nOptions\n\n * id (String): token ID\n\nUsage\n\n``` javascript\nconsul.acl.get('63e1d82e-f718-eb92-3b7d-61f0c71d45b4', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"CreateIndex\": 7,\n  \"ModifyIndex\": 7,\n  \"ID\": \"63e1d82e-f718-eb92-3b7d-61f0c71d45b4\",\n  \"Name\": \"Read only\",\n  \"Type\": \"client\",\n  \"Rules\": \"{\\\"key\\\":{\\\"\\\":{\\\"policy\\\":\\\"read\\\"}}}\"\n}\n```\n\n<a name=\"acl-clone\"/>\n### consul.acl.clone(options, callback)\n\nCreates a new token by cloning an existing token.\n\nOptions\n\n * id (String): token ID\n\nUsage\n\n``` javascript\nconsul.acl.clone('63e1d82e-f718-eb92-3b7d-61f0c71d45b4', function(err) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"ID\": \"9fb8b20b-2636-adbb-9b99-d879df3305ec\"\n}\n```\n\n<a name=\"acl-list\"/>\n### consul.acl.list([options], callback)\n\nLists all the active tokens.\n\nUsage\n\n``` javascript\nconsul.acl.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"CreateIndex\": 2,\n    \"ModifyIndex\": 2,\n    \"ID\": \"anonymous\",\n    \"Name\": \"Anonymous Token\",\n    \"Type\": \"client\",\n    \"Rules\": \"\"\n  }\n  {\n    \"CreateIndex\": 3,\n    \"ModifyIndex\": 3,\n    \"ID\": \"root\",\n    \"Name\": \"Master Token\",\n    \"Type\": \"management\",\n    \"Rules\": \"\"\n  }\n]\n```\n\n<a name=\"agent\"/>\n### consul.agent\n\n * [check](#agent-check)\n * [service](#agent-service)\n * [members](#agent-members)\n * [self](#agent-self)\n * [maintenance](#agent-maintenance)\n * [join](#agent-join)\n * [forceLeave](#agent-force-leave)\n\n<a name=\"agent-members\"/>\n### consul.agent.members([options], callback)\n\nReturns the members as seen by the consul agent.\n\nOptions\n\n * wan (Boolean, default: false): return WAN members instead of LAN members\n\nUsage\n\n``` javascript\nconsul.agent.members(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Name\": \"node1\",\n    \"Addr\": \"127.0.0.1\",\n    \"Port\": 8301,\n    \"Tags\": {\n      \"bootstrap\": \"1\",\n      \"build\": \"0.3.0:441d613e\",\n      \"dc\": \"dc1\",\n      \"port\": \"8300\",\n      \"role\": \"consul\",\n      \"vsn\": \"2\",\n      \"vsn_max\": \"2\",\n      \"vsn_min\": \"1\"\n    },\n    \"Status\": 1,\n    \"ProtocolMin\": 1,\n    \"ProtocolMax\": 2,\n    \"ProtocolCur\": 2,\n    \"DelegateMin\": 2,\n    \"DelegateMax\": 4,\n    \"DelegateCur\": 4\n  }\n]\n```\n\n<a name=\"agent-self\"/>\n### consul.agent.self(callback)\n\nReturns the agent node configuration.\n\nUsage\n\n``` javascript\nconsul.agent.self(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"Config\": {\n    \"Bootstrap\": true,\n    \"Server\": true,\n    \"Datacenter\": \"dc1\",\n    \"DataDir\": \"/tmp/node1/data\",\n    \"DNSRecursor\": \"\",\n    \"DNSConfig\": {\n      \"NodeTTL\": 0,\n      \"ServiceTTL\": null,\n      \"AllowStale\": false,\n      \"MaxStale\": 5000000000\n    },\n    \"Domain\": \"consul.\",\n    \"LogLevel\": \"INFO\",\n    \"NodeName\": \"node1\",\n    \"ClientAddr\": \"127.0.0.1\",\n    \"BindAddr\": \"127.0.0.1\",\n    \"AdvertiseAddr\": \"127.0.0.1\",\n    \"Ports\": {\n      \"DNS\": 8600,\n      \"HTTP\": 8500,\n      \"RPC\": 8400,\n      \"SerfLan\": 8301,\n      \"SerfWan\": 8302,\n      \"Server\": 8300\n    },\n    \"LeaveOnTerm\": false,\n    \"SkipLeaveOnInt\": false,\n    \"StatsiteAddr\": \"\",\n    \"Protocol\": 2,\n    \"EnableDebug\": false,\n    \"VerifyIncoming\": false,\n    \"VerifyOutgoing\": false,\n    \"CAFile\": \"\",\n    \"CertFile\": \"\",\n    \"KeyFile\": \"\",\n    \"ServerName\": \"\",\n    \"StartJoin\": [],\n    \"UiDir\": \"\",\n    \"PidFile\": \"/tmp/node1/pid\",\n    \"EnableSyslog\": false,\n    \"SyslogFacility\": \"LOCAL0\",\n    \"RejoinAfterLeave\": false,\n    \"CheckUpdateInterval\": 300000000000,\n    \"Revision\": \"441d613e1bd96254c78c46ee7c1b35c161fc7295+CHANGES\",\n    \"Version\": \"0.3.0\",\n    \"VersionPrerelease\": \"\"\n  },\n  \"Member\": {\n    \"Name\": \"node1\",\n    \"Addr\": \"127.0.0.1\",\n    \"Port\": 8301,\n    \"Tags\": {\n      \"bootstrap\": \"1\",\n      \"build\": \"0.3.0:441d613e\",\n      \"dc\": \"dc1\",\n      \"port\": \"8300\",\n      \"role\": \"consul\",\n      \"vsn\": \"2\",\n      \"vsn_max\": \"2\",\n      \"vsn_min\": \"1\"\n    },\n    \"Status\": 1,\n    \"ProtocolMin\": 1,\n    \"ProtocolMax\": 2,\n    \"ProtocolCur\": 2,\n    \"DelegateMin\": 2,\n    \"DelegateMax\": 4,\n    \"DelegateCur\": 4\n  }\n}\n```\n\n<a name=\"agent-maintenance\"/>\n### consul.agent.maintenance(options, callback)\n\nSet node maintenance mode.\n\nOptions\n\n * enable (Boolean): maintenance mode enabled\n * reason (String, optional): human readable reason for maintenance\n\nUsage\n\n``` javascript\nconsul.agent.maintenance(true, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-join\"/>\n### consul.agent.join(options, callback)\n\nTrigger agent to join a node.\n\nOptions\n\n * address (String): node IP address to join\n * wan (Boolean, default false): attempt to join using the WAN pool\n\nUsage\n\n``` javascript\nconsul.agent.join('127.0.0.2', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-force-leave\"/>\n### consul.agent.forceLeave(options, callback)\n\nForce remove node.\n\nOptions\n\n * node (String): node name to remove\n\nUsage\n\n``` javascript\nconsul.agent.forceLeave('node2', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-check\"/>\n### consul.agent.check\n\n * [list](#agent-check-list)\n * [register](#agent-check-register)\n * [deregister](#agent-check-deregister)\n * [pass](#agent-check-pass)\n * [warn](#agent-check-warn)\n * [fail](#agent-check-fail)\n\n<a name=\"agent-check-list\"/>\n### consul.agent.check.list(callback)\n\nReturns the checks the agent is managing.\n\nUsage\n\n``` javascript\nconsul.agent.check.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"example\": {\n    \"Node\": \"node1\",\n    \"CheckID\": \"example\",\n    \"Name\": \"example\",\n    \"Status\": \"passing\",\n    \"Notes\": \"This is an example check.\",\n    \"Output\": \"\",\n    \"ServiceID\": \"\",\n    \"ServiceName\": \"\"\n  }\n}\n```\n\n<a name=\"agent-check-register\"/>\n### consul.agent.check.register(options, callback)\n\nRegisters a new check.\n\nOptions\n\n * name (String): check name\n * id (String, optional): check ID\n * serviceid (String, optional): service ID, associate check with existing service\n * http (String): url to test, 2xx passes, 429 warns, and all others fail\n * script (String): path to check script, requires interval\n * internal (String): interval to run check, requires script (ex: `15s`)\n * ttl (String): time to live before check must be updated, instead of script and interval (ex: `60s`)\n * notes (String, optional): human readable description of check\n\nUsage\n\n``` javascript\nvar check = {\n  name: 'example',\n  ttl: '15s',\n  notes: 'This is an example check.',\n};\n\nconsul.agent.check.register(check, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-check-deregister\"/>\n### consul.agent.check.deregister(options, callback)\n\nDeregister a check.\n\nOptions\n\n * id (String): check ID\n\nUsage\n\n``` javascript\nconsul.agent.check.deregister('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-check-pass\"/>\n### consul.agent.check.pass(options, callback)\n\nMark a test as passing.\n\nOptions\n\n * id (String): check ID\n\nUsage\n\n``` javascript\nconsul.agent.check.pass('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-check-warn\"/>\n### consul.agent.check.warn(options, callback)\n\nMark a test as warning.\n\nOptions\n\n * id (String): check ID\n\nUsage\n\n``` javascript\nconsul.agent.check.warn('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-check-fail\"/>\n### consul.agent.check.fail(options, callback)\n\nMark a test as critical.\n\nOptions\n\n * id (String): check ID\n\nUsage\n\n``` javascript\nconsul.agent.check.fail('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-service\"/>\n### consul.agent.service\n\n * [list](#agent-service-list)\n * [register](#agent-service-register)\n * [deregister](#agent-service-deregister)\n * [maintenance](#agent-service-maintenance)\n\n<a name=\"agent-service-list\"/>\n### consul.agent.service.list(callback)\n\nReturns the services the agent is managing.\n\nUsage\n\n``` javascript\nconsul.agent.service.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"example\": {\n    \"ID\": \"example\",\n    \"Service\": \"example\",\n    \"Tags\": [\n      \"dev\",\n      \"web\"\n    ],\n    \"Port\": 80\n  }\n}\n```\n\n<a name=\"agent-service-register\"/>\n### consul.agent.service.register(options, callback)\n\nRegisters a new service.\n\nOptions\n\n * name (String): service name\n * id (String, optional): service ID\n * tags (String[], optional): service tags\n * check (Object, optional): service check\n  * script (String): path to check script, requires interval\n  * internal (String): interval to run check, requires script (ex: `15s`)\n  * ttl (String): time to live before check must be updated, instead of script and interval (ex: `60s`)\n  * notes (String, optional): human readable description of check\n\nUsage\n\n``` javascript\nconsul.agent.service.register('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-service-deregister\"/>\n### consul.agent.service.deregister(options, callback)\n\nDeregister a service.\n\nOptions\n\n * id (String): service ID\n\nUsage\n\n``` javascript\nconsul.agent.service.deregister('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"agent-service-maintenance\"/>\n### consul.agent.service.maintenance(options, callback)\n\nSet service maintenance mode.\n\nOptions\n\n * id (String): service ID\n * enable (Boolean): maintenance mode enabled\n * reason (String, optional): human readable reason for maintenance\n\nUsage\n\n``` javascript\nconsul.agent.service.maintenance({ id: 'example', enable: true }, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"catalog\"/>\n### consul.catalog\n\n * [node](#catalog-node)\n * [service](#catalog-service)\n * [datacenters](#catalog-datacenters)\n\n<a name=\"catalog-datacenters\"/>\n### consul.catalog.datacenters(callback)\n\nLists known datacenters.\n\nUsage\n\n``` javascript\nconsul.catalog.datacenters(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  \"dc1\"\n]\n```\n\n<a name=\"catalog-node\"/>\n### consul.catalog.node\n\n * [list](#catalog-node-list)\n * [services](#catalog-node-services)\n\n<a name=\"catalog-node-list\"/>\n### consul.catalog.node.list([options], callback)\n\nLists nodes in a given datacenter.\n\nOptions\n\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.catalog.node.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": \"node1\",\n    \"Address\": \"127.0.0.1\"\n  }\n]\n```\n\n<a name=\"catalog-node-services\"/>\n### consul.catalog.node.services(options, callback)\n\nLists the services provided by a node.\n\nOptions\n\n * node (String): node ID\n\nUsage\n\n``` javascript\nconsul.catalog.node.services('node1', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"Node\": {\n    \"Node\": \"node1\",\n    \"Address\": \"127.0.0.1\"\n  },\n  \"Services\": {\n    \"consul\": {\n      \"ID\": \"consul\",\n      \"Service\": \"consul\",\n      \"Tags\": [],\n      \"Port\": 8300\n    },\n    \"example\": {\n      \"ID\": \"example\",\n      \"Service\": \"example\",\n      \"Tags\": [\n        \"dev\",\n        \"web\"\n      ],\n      \"Port\": 80\n    }\n  }\n}\n```\n\n<a name=\"catalog-service\"/>\n### consul.catalog.service\n\n * [list](#catalog-service-list)\n * [nodes](#catalog-service-nodes)\n\n<a name=\"catalog-service-list\"/>\n### consul.catalog.service.list([options], callback)\n\nLists services in a given datacenter.\n\nOptions\n\n * dc (String): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.catalog.service.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"consul\": [],\n  \"example\": [\n    \"dev\",\n    \"web\"\n  ]\n}\n```\n\n<a name=\"catalog-service-nodes\"/>\n### consul.catalog.service.nodes(options, callback)\n\nLists the nodes in a given service.\n\nOptions\n\n * service (String): service ID\n * dc (String, optional): datacenter (defaults to local for agent)\n * tag (String, optional): filter by tag\n\nUsage\n\n``` javascript\nconsul.catalog.service.nodes('example', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": \"node1\",\n    \"Address\": \"127.0.0.1\",\n    \"ServiceID\": \"example\",\n    \"ServiceName\": \"example\",\n    \"ServiceTags\": [\n      \"dev\",\n      \"web\"\n    ],\n    \"ServicePort\": 80\n  }\n]\n```\n\n<a name=\"event\"/>\n### consul.event\n\n * [fire](#event-fire)\n * [list](#event-list)\n\n<a name=\"event-fire\"/>\n### consul.event.fire(options, callback)\n\nFires a new user event.\n\nOptions\n\n * name (String): event name\n * payload (String|Buffer): payload\n * node (String, optional): regular expression to filter by node\n * service (String, optional): regular expression to filter by service\n * tag (String, optional): regular expression to filter by tag\n\nUsage\n\n``` javascript\nconsul.event.fire('deploy', '53', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"ID\": \"4730953b-3135-7ff2-47a7-9d9fc9c4e5a2\",\n  \"Name\": \"deploy\",\n  \"Payload\": \"53\",\n  \"NodeFilter\": \"\",\n  \"ServiceFilter\": \"\",\n  \"TagFilter\": \"\",\n  \"Version\": 1,\n  \"LTime\": 0\n}\n```\n\n<a name=\"event-list\"/>\n### consul.event.list([options], callback)\n\nLists the most recent events an agent has seen.\n\nOptions\n\n * name (String, optional): filter by event name\n\nUsage\n\n``` javascript\nconsul.event.list('deploy', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"ID\": \"4730953b-3135-7ff2-47a7-9d9fc9c4e5a2\",\n    \"Name\": \"deploy\",\n    \"Payload\": \"53\",\n    \"NodeFilter\": \"\",\n    \"ServiceFilter\": \"\",\n    \"TagFilter\": \"\",\n    \"Version\": 1,\n    \"LTime\": 2\n  }\n]\n```\n\n<a name=\"health\"/>\n### consul.health\n\n * [node](#health-node)\n * [checks](#health-checks)\n * [service](#health-service)\n * [state](#health-state)\n\n<a name=\"health-node\"/>\n### consul.health.node(options, callback)\n\nReturns the health info of a node.\n\nOptions\n\n * node (String): node\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.health.node('node1', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": \"node1\",\n    \"CheckID\": \"serfHealth\",\n    \"Name\": \"Serf Health Status\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"Agent alive and reachable\",\n    \"ServiceID\": \"\",\n    \"ServiceName\": \"\"\n  },\n  {\n    \"Node\": \"node1\",\n    \"CheckID\": \"service:example\",\n    \"Name\": \"Service 'example' check\",\n    \"Status\": \"critical\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"example\",\n    \"ServiceName\": \"example\"\n  }\n]\n```\n\n<a name=\"health-checks\"/>\n### consul.health.checks(options, callback)\n\nReturns the checks of a service.\n\nOptions\n\n * service (String): service ID\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.health.checks('example', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": \"node1\",\n    \"CheckID\": \"service:example\",\n    \"Name\": \"Service 'example' check\",\n    \"Status\": \"critical\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"example\",\n    \"ServiceName\": \"example\"\n  }\n]\n```\n\n<a name=\"health-service\"/>\n### consul.health.service(options, callback)\n\nReturns the nodes and health info of a service.\n\nOptions\n\n * service (String): service ID\n * dc (String, optional): datacenter (defaults to local for agent)\n * tag (String, optional): filter by tag\n * passing (Boolean, optional): restrict to passing checks\n\nUsage\n\n``` javascript\nconsul.health.service('example', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": {\n      \"Node\": \"node1\",\n      \"Address\": \"127.0.0.1\"\n    },\n    \"Service\": {\n      \"ID\": \"example\",\n      \"Service\": \"example\",\n      \"Tags\": [],\n      \"Port\": 0\n    },\n    \"Checks\": [\n      {\n        \"Node\": \"node1\",\n        \"CheckID\": \"service:example\",\n        \"Name\": \"Service 'example' check\",\n        \"Status\": \"critical\",\n        \"Notes\": \"\",\n        \"Output\": \"\",\n        \"ServiceID\": \"example\",\n        \"ServiceName\": \"example\"\n      },\n      {\n        \"Node\": \"node1\",\n        \"CheckID\": \"serfHealth\",\n        \"Name\": \"Serf Health Status\",\n        \"Status\": \"passing\",\n        \"Notes\": \"\",\n        \"Output\": \"Agent alive and reachable\",\n        \"ServiceID\": \"\",\n        \"ServiceName\": \"\"\n      }\n    ]\n  }\n]\n```\n\n<a name=\"health-state\"/>\n### consul.health.state(options, callback)\n\nReturns the checks in a given state.\n\nOptions\n\n * state (String, enum: any, passing, warning, critical): state\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.health.state('critical', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"Node\": \"node1\",\n    \"CheckID\": \"service:example\",\n    \"Name\": \"Service 'example' check\",\n    \"Status\": \"critical\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"example\",\n    \"ServiceName\": \"example\"\n  }\n]\n```\n\n<a name=\"kv\"/>\n### consul.kv\n\n * [get](#kv-get)\n * [keys](#kv-keys)\n * [set](#kv-set)\n * [del](#kv-del)\n\n<a name=\"kv-get\"/>\n### consul.kv.get(options, callback)\n\nReturn key/value (kv) pair(s).\n\nOptions\n\n * key (String): path to value\n * dc (String, optional): datacenter (defaults to local for agent)\n * recurse (Boolean, default: false): return all keys with given key prefix\n * index (String, optional): used with `ModifyIndex` to block and wait for changes\n * wait (String, optional): limit how long to wait for changes (ex: `5m`), used with index\n * raw (Boolean, optional): return raw value (can't be used with recursive, implies buffer)\n * buffer (Boolean, default: false): decode value into Buffer instead of String\n\nUsage\n\n``` javascript\nconsul.kv.get('hello', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"CreateIndex\": 6,\n  \"ModifyIndex\": 6,\n  \"LockIndex\": 0,\n  \"Key\": \"hello\",\n  \"Flags\": 0,\n  \"Value\": \"world\"\n}\n```\n\n<a name=\"kv-keys\"/>\n### consul.kv.keys(options, callback)\n\nReturn keys for a given prefix.\n\nOptions\n\n * key (String): path prefix\n * dc (String, optional): datacenter (defaults to local for agent)\n * separator (String, optional): list keys up to a given separator\n\nUsage\n\n``` javascript\nconsul.kv.keys('a/', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  \"a/b\",\n  \"a/c\"\n]\n```\n\n<a name=\"kv-set\"/>\n### consul.kv.set(options, callback)\n\nSet key/value (kv) pair.\n\nOptions\n\n * key (String): key\n * value (String|Buffer): value\n * dc (String, optional): datacenter (defaults to local for agent)\n * flags (Number, optional): unsigned integer opaque to user, can be used by application\n * cas (String, optional): use with `ModifyIndex` to do a check-and-set operation\n * acquire (String, optional): session ID, lock acquisition operation\n * release (String, optional): session ID, lock release operation\n\nUsage\n\n``` javascript\nconsul.kv.set('hello', 'world', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\ntrue\n```\n\n<a name=\"kv-del\"/>\n### consul.kv.del(options, callback)\n\nDelete key/value (kv) pair(s).\n\nOptions\n\n * key (String): key\n * dc (String, optional): datacenter (defaults to local for agent)\n * recurse (Boolean, default: false): delete all keys with given key prefix\n * cas (String, optional): use with `ModifyIndex` to do a check-and-set operation (must be greater than `0`)\n\nUsage\n\n``` javascript\nconsul.kv.del('hello', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"session\"/>\n### consul.session\n\n * [create](#session-create)\n * [destroy](#session-destroy)\n * [get](#session-get)\n * [node](#session-node)\n * [list](#session-list)\n * [renew](#session-renew)\n\n<a name=\"session-create\"/>\n### consul.session.create([options], callback)\n\nCreate a new session.\n\nOptions\n\n * dc (String, optional): datacenter (defaults to local for agent)\n * lockdelay (String, range: 1s-60s, default: `15s`): the time consul prevents locks held by the session from being acquired after a session has been invalidated\n * name (String, optional): human readable name for the session\n * node (String, optional): node with which to associate session (defaults to connected agent)\n * checks (String[], optional): checks to associate with session\n * behavior (String, enum: release, delete; default: release): controls the behavior when a session is invalidated\n * ttl (String, optional, valid: `10s`-`3600s`): interval session must be renewed\n\nUsage\n\n``` javascript\nconsul.session.create(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"ID\": \"a0f5dc05-84c3-5f5a-1d88-05b875e524e1\"\n}\n```\n\n<a name=\"session-destroy\"/>\n### consul.session.destroy(options, callback)\n\nDestroy a given session.\n\nOptions\n\n * id (String): session ID\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.session.destroy('a0f5dc05-84c3-5f5a-1d88-05b875e524e1', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"session-get\"/>\n### consul.session.get(options, callback)\n\nQueries a given session.\n\nOptions\n\n * id (String): session ID\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.session.get('a0f5dc05-84c3-5f5a-1d88-05b875e524e1', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n{\n  \"CreateIndex\": 11,\n  \"ID\": \"a0f5dc05-84c3-5f5a-1d88-05b875e524e1\",\n  \"Name\": \"\",\n  \"Node\": \"node1\",\n  \"Checks\": [\n    \"serfHealth\"\n  ],\n  \"LockDelay\": 15000000000\n}\n```\n\n<a name=\"session-node\"/>\n### consul.session.node(options, callback)\n\nLists sessions belonging to a node.\n\nOptions\n\n * node (String): node\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.session.node('node1', function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"CreateIndex\": 13,\n    \"ID\": \"a0f5dc05-84c3-5f5a-1d88-05b875e524e1\",\n    \"Name\": \"\",\n    \"Node\": \"node1\",\n    \"Checks\": [\n      \"serfHealth\"\n    ],\n    \"LockDelay\": 15000000000\n  }\n]\n```\n\n<a name=\"session-list\"/>\n### consul.session.list([options], callback)\n\nLists all the active sessions.\n\nOptions\n\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.session.list(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"CreateIndex\": 15,\n    \"ID\": \"a0f5dc05-84c3-5f5a-1d88-05b875e524e1\",\n    \"Name\": \"\",\n    \"Node\": \"node1\",\n    \"Checks\": [\n      \"serfHealth\"\n    ],\n    \"LockDelay\": 15000000000\n  }\n]\n```\n\n<a name=\"session-renew\"/>\n### consul.session.renew(options, callback)\n\nRenew a given session.\n\nOptions\n\n * id (String): session ID\n * dc (String, optional): datacenter (defaults to local for agent)\n\nUsage\n\n``` javascript\nconsul.session.renew('a0f5dc05-84c3-5f5a-1d88-05b875e524e1', function(err, renew) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"CreateIndex\": 15,\n    \"ID\": \"a0f5dc05-84c3-5f5a-1d88-05b875e524e1\",\n    \"Name\": \"\",\n    \"Node\": \"node1\",\n    \"Checks\": [\n      \"serfHealth\"\n    ],\n    \"LockDelay\": 15000000000,\n    \"Behavior\": \"release\",\n    \"TTL\": \"\"\n  }\n]\n```\n\n<a name=\"status\"/>\n### consul.status\n\n * [leader](#status-leader)\n * [peers](#status-peers)\n\n<a name=\"status-leader\"/>\n### consul.status.leader(callback)\n\nReturns the current Raft leader.\n\nUsage\n\n``` javascript\nconsul.status.leader(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n\"127.0.0.1:8300\"\n```\n\n<a name=\"status-peers\"/>\n### consul.status.peers(callback)\n\nReturns the current Raft peer set.\n\nUsage\n\n``` javascript\nconsul.status.peers(function(err, result) {\n  if (err) throw err;\n});\n```\n\nResult\n\n``` json\n[\n  \"127.0.0.1:8300\"\n]\n```\n\n<a name=\"watch\"/>\n### consul.watch(options)\n\nWatch an endpoint for changes.\n\nOptions\n\n * method (Function): method to watch\n * options (Object): method options\n\nUsage\n\n``` javascript\nvar watch = consul.watch({ method: consul.kv.get, options: { key: 'test' });\n\nwatch.on('change', function(data, res) {\n  console.log('data:', data);\n});\n\nwatch.on('error', function(err) {\n  console.log('error:', err);\n});\n\nsetTimeout(function() { watch.end(); }, 30 * 1000);\n```\n\n## Acceptance Tests\n\n 1. Install [Consul][download] into your `PATH`.\n 1. Attach required IPs\n\n    ``` console\n    $ sudo ifconfig lo0 alias 127.0.0.2 up\n    $ sudo ifconfig lo0 alias 127.0.0.3 up\n    ```\n\n 1. Install client dependencies\n\n    ``` console\n    $ npm install\n    ```\n\n 1. Run tests\n\n    ``` console\n    $ npm run acceptance\n    ```\n\n## License\n\nThis work is licensed under the MIT License (see the LICENSE file).\n\n[consul]: http://www.consul.io/\n[consul-docs-api]: http://www.consul.io/docs/agent/http.html\n[download]: http://www.consul.io/downloads.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/silas/node-consul/issues"
  },
  "_id": "consul@0.14.0",
  "dist": {
    "shasum": "22ef302d8a293af432232dd526624f78637e2c48"
  },
  "_from": "consul@",
  "_resolved": "https://registry.npmjs.org/consul/-/consul-0.14.0.tgz"
}
